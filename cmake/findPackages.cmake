include(FetchContent)
include(CheckIncludeFile)
include(${LUNA_SOURCE_DIR}/cmake/utils.cmake)

function(findVulkan)
    set(VOLK_PULL_IN_VULKAN OFF)
    makePackageAvailable(https://github.com/zeux/volk.git vulkan-sdk-1.4.*.* Vulkan COMPONENTS volk)
    set(VOLK_VERSION ${_LUNA_PACKAGE_LATEST_RELEASE_VERSION})
    if (NOT Vulkan_volk_FOUND)
        makePackageAvailable(https://github.com/KhronosGroup/Vulkan-Headers.git vulkan-sdk-1.4.*.* Headers)
        ensureVersionsMatch("Volk" VOLK_VERSION "Vulkan Headers" _LUNA_PACKAGE_LATEST_RELEASE_VERSION)
    else ()
        add_library(volk::volk ALIAS Vulkan::volk)
    endif ()

    disableOptions(SPIRV_REFLECT_EXECUTABLE SPIRV_REFLECT_INSTALL INSTALL_GTEST)
    set(SPIRV_REFLECT_STATIC_LIB ON)
    makePackageAvailable(https://github.com/KhronosGroup/SPIRV-Reflect.git vulkan-sdk-1.4.*.* SPIRV-Reflect)
    ensureVersionsMatch("Volk" VOLK_VERSION "SPIRV-Reflect" _LUNA_PACKAGE_LATEST_RELEASE_VERSION)

    makePackageAvailable(https://github.com/GPUOpen-LibrariesAndSDKs/VulkanMemoryAllocator.git v3.*.* VulkanMemoryAllocator CONFIG)

    add_library(LunaDependencies INTERFACE)
    target_link_libraries(LunaDependencies INTERFACE volk::volk GPUOpen::VulkanMemoryAllocator spirv-reflect-static)
    target_compile_options(LunaDependencies INTERFACE $<$<BOOL:${LUNA_DEFINE_VK_NO_PROTOTYPES}>:$<IF:$<OR:$<COMPILE_LANG_AND_ID:C,MSVC>,$<COMPILE_LANG_AND_ID:CXX,MSVC>>,/DVK_NO_PROTOTYPES,-DVK_NO_PROTOTYPES>>)
endfunction()

function(findSDL3)
    disableOptions(SDL_AUDIO_DEFAULT SDL_GPU_DEFAULT SDL_RENDER_DEFAULT SDL_CAMERA_DEFAULT SDL_JOYSTICK_DEFAULT SDL_HAPTIC_DEFAULT SDL_HIDAPI_DEFAULT SDL_POWER_DEFAULT SDL_SENSOR_DEFAULT SDL_DIALOG_DEFAULT SDL_PIPEWIRE SDL_OFFSCREEN SDL_LIBUDEV SDL_TEST_LIBRARY SDL_EXAMPLES)
    makePackageAvailable(https://github.com/libsdl-org/SDL.git release-3.*.* SDL3 CONFIG)
endfunction()

function(fetchCglm)
    check_include_file("cglm/cglm.h" cglm_FOUND)
    if (NOT cglm_FOUND)
        set(CGLM_SHARED OFF)
        set(CGLM_STATIC ON)
        makePackageAvailable(https://github.com/recp/cglm.git v0.*.* cglm)
    else ()
        add_library(cglm INTERFACE)
    endif ()
endfunction()

function(fetchLodePNG)
    file(DOWNLOAD https://raw.githubusercontent.com/lvandeve/lodepng/refs/heads/master/lodepng.cpp ${CMAKE_BINARY_DIR}/_deps/lodepng/lodepng.c)
    file(DOWNLOAD https://raw.githubusercontent.com/lvandeve/lodepng/refs/heads/master/lodepng.h ${CMAKE_BINARY_DIR}/_deps/lodepng/lodepng.h)
    file(DOWNLOAD https://raw.githubusercontent.com/lvandeve/lodepng/refs/heads/master/LICENSE ${CMAKE_BINARY_DIR}/_deps/lodepng/LICENSE)
    add_library(LodePNG INTERFACE)
    target_compile_options(LodePNG INTERFACE "SHELL:${SYSTEM_DIRECTORY_FLAG} ${CMAKE_BINARY_DIR}/_deps/lodepng")
    target_sources(LodePNG INTERFACE "${CMAKE_BINARY_DIR}/_deps/lodepng/lodepng.c")
    target_include_directories(LodePNG INTERFACE "${CMAKE_BINARY_DIR}/_deps/lodepng")
endfunction()